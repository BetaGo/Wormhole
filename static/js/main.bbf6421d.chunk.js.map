{"version":3,"sources":["components/Icon/IconFont.tsx","components/SearchBox/SearchBox.tsx","pages/Home.tsx","pages/Login.tsx","pages/News.tsx","pages/SignUp.tsx","pages/Todo.tsx","theme/dark.ts","App.tsx","theme/light.ts","hooks/useThemeMode.ts","serviceWorker.ts","index.tsx"],"names":["IconFont","props","name","restProps","SvgIcon","xlinkHref","Root","styled","Paper","Input","InputBase","theme","spacing","Divider","MUIDivider","observer","React","useState","anchorEl","setAnchorEl","inputRef","useRef","store","useLocalStore","searchEngineName","searchText","handleCloseMenu","handleSelectSearchEngine","setTimeout","current","focus","component","onSubmit","e","preventDefault","window","open","encodeURIComponent","IconButton","onClick","currentTarget","Menu","keepMounted","Boolean","onClose","MenuItem","orientation","autoFocus","value","onChange","target","placeholder","endAdornment","size","fontSize","type","div","Content","Home","Login","News","SignUp","Todo","darkTheme","createMuiTheme","palette","secondary","main","light","dark","contrastText","background","default","primary","themeDict","App","themeMode","isSystemDark","useMedia","getThemeMode","useCallback","setThemeMode","useLayoutEffect","mode","useThemeMode","NoSsr","StylesProvider","injectFirst","CssBaseline","exact","path","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bbf6421d.chunk.js","sourcesContent":["import React from \"react\";\nimport SvgIcon, { SvgIconProps } from \"@material-ui/core/SvgIcon\";\n\ninterface IIconFontProps {\n  name: string;\n}\n\nconst IconFont: React.FC<IIconFontProps & SvgIconProps> = (props) => {\n  const { name, ...restProps } = props;\n  return (\n    <SvgIcon {...restProps}>\n      <use xlinkHref={`#icon${name}`}></use>\n    </SvgIcon>\n  );\n};\n\nexport default IconFont;\n","import {\n  Divider as MUIDivider,\n  IconButton,\n  InputBase,\n  Menu,\n  MenuItem,\n  Paper,\n} from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { observer, useLocalStore } from \"mobx-react-lite\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\n\nimport IconFont from \"../Icon/IconFont\";\n\nconst Root = styled(Paper)`\n  padding: 2px 4px;\n  display: flex;\n  align-items: center;\n`;\n\nconst Input = styled(InputBase)`\n  margin-left: ${(props) => props.theme.spacing(1)}px;\n  flex: 1;\n`;\n\nconst Divider = styled(MUIDivider)`\n  height: 1em;\n  margin: auto 0.5em;\n`;\n\nconst SearchBox = () => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const store = useLocalStore(() => ({\n    searchEngineName: \"google\",\n    searchText: \"\",\n  }));\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!store.searchText) return;\n    switch (store.searchEngineName) {\n      case \"google\":\n        window.open(\n          \"https://www.google.com/search?q=\" +\n            encodeURIComponent(store.searchText)\n        );\n        break;\n      case \"stack-overflow\":\n        window.open(\n          \"https://stackoverflow.com/search?q=\" +\n            encodeURIComponent(store.searchText)\n        );\n        break;\n      case \"baidu\":\n        window.open(\n          \"https://www.baidu.com/s?wd=\" + encodeURIComponent(store.searchText)\n        );\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleCloseMenu = () => {\n    setAnchorEl(null);\n  };\n\n  const handleSelectSearchEngine = (name: string) => () => {\n    store.searchEngineName = name;\n    handleCloseMenu();\n    setTimeout(() => {\n      inputRef.current?.focus();\n    }, 0);\n  };\n  return (\n    <Root component=\"form\" onSubmit={handleSubmit}>\n      <IconButton\n        onClick={(e) => {\n          setAnchorEl(e.currentTarget);\n        }}\n      >\n        <IconFont name={store.searchEngineName} />\n      </IconButton>\n      <Menu\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleCloseMenu}\n      >\n        <MenuItem onClick={handleSelectSearchEngine(\"google\")}>\n          <IconFont name=\"google\" />\n          <Divider orientation=\"vertical\" />\n          Google\n        </MenuItem>\n        <MenuItem onClick={handleSelectSearchEngine(\"baidu\")}>\n          <IconFont name=\"baidu\" />\n          <Divider orientation=\"vertical\" />\n          BaiDu\n        </MenuItem>\n        <MenuItem onClick={handleSelectSearchEngine(\"stack-overflow\")}>\n          <IconFont name=\"stack-overflow\" />\n          <Divider orientation=\"vertical\" />\n          StackOverflow\n        </MenuItem>\n      </Menu>\n      <Input\n        autoFocus\n        inputRef={inputRef}\n        value={store.searchText}\n        onChange={(e) => (store.searchText = e.target.value)}\n        placeholder={`Search with ${store.searchEngineName}`}\n        endAdornment={\n          store.searchText && (\n            <IconButton\n              size=\"small\"\n              onClick={() => {\n                store.searchText = \"\";\n                inputRef.current?.focus();\n              }}\n            >\n              <ClearIcon fontSize=\"inherit\" />\n            </IconButton>\n          )\n        }\n      ></Input>\n      <IconButton type=\"submit\">\n        <SearchIcon />\n      </IconButton>\n    </Root>\n  );\n};\n\nexport default observer(SearchBox);\n","import React from \"react\";\nimport SearchBox from \"../components/SearchBox/SearchBox\";\nimport styled from \"styled-components\";\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n`;\n\nconst Content = styled.div`\n  width: 100%;\n  max-width: 600px;\n  margin: auto;\n  padding: 0 10px;\n`;\n\nconst Home = () => {\n  return (\n    <Root>\n      <Content>\n        <SearchBox />\n      </Content>\n    </Root>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nconst Login = () => {\n  return <div>Login</div>;\n};\n\nexport default Login;\n","import React from \"react\";\n\nconst News = () => {\n  return <div>News</div>;\n};\n\nexport default News;\n","import React from \"react\";\n\nconst SignUp = () => {\n  return <div>SignUp</div>;\n};\n\nexport default SignUp;\n","import React from \"react\";\n\nconst Todo = () => {\n  return <div>TODO</div>;\n};\n\nexport default Todo;\n","import { createMuiTheme, ThemeOptions } from \"@material-ui/core/styles\";\n\nconst baseThemOption: ThemeOptions = {\n  palette: {\n    secondary: {\n      main: \"#127bc4\",\n      light: \"rgb(65, 149, 207)\",\n      dark: \"rgb(12, 86, 137)\",\n      contrastText: \"#fff\",\n    },\n    type: \"dark\",\n    background: {\n      default: \"#121212\",\n    },\n    primary: {\n      main: \"#d63947\",\n      light: \"rgb(222, 96, 107)\",\n      dark: \"rgb(149, 39, 49)\",\n      contrastText: \"#fff\",\n    },\n  },\n};\n\nexport const darkTheme = createMuiTheme(baseThemOption);\n","import CssBaseline from \"@material-ui/core/CssBaseline\";\nimport NoSsr from \"@material-ui/core/NoSsr\";\nimport { MuiThemeProvider, StylesProvider } from \"@material-ui/core/styles\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ThemeProvider } from \"styled-components\";\n\nimport { useThemeMode } from \"./hooks/useThemeMode\";\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport News from \"./pages/News\";\nimport SignUp from \"./pages/SignUp\";\nimport Todo from \"./pages/Todo\";\nimport { darkTheme } from \"./theme/dark\";\nimport { lightTheme } from \"./theme/light\";\n\nconst themeDict = {\n  light: lightTheme,\n  dark: darkTheme,\n};\n\nfunction App() {\n  const themeMode = useThemeMode();\n  return (\n    <NoSsr>\n      <StylesProvider injectFirst>\n        <MuiThemeProvider theme={themeDict[themeMode]}>\n          <ThemeProvider theme={themeDict[themeMode]}>\n            <CssBaseline />\n            <Router>\n              <Switch>\n                <Route exact path=\"/\">\n                  <Home />\n                </Route>\n                <Route exact path=\"/login\">\n                  <Login />\n                </Route>\n                <Route exact path=\"/signup\">\n                  <SignUp />\n                </Route>\n                <Route exact path=\"/todo\">\n                  <Todo />\n                </Route>\n                <Route exact path=\"/news\">\n                  <News />\n                </Route>\n              </Switch>\n            </Router>\n          </ThemeProvider>\n        </MuiThemeProvider>\n      </StylesProvider>\n    </NoSsr>\n  );\n}\n\nexport default App;\n","import { createMuiTheme, ThemeOptions } from \"@material-ui/core/styles\";\n\nconst baseThemOption: ThemeOptions = {\n  palette: {\n    secondary: {\n      main: \"#127bc4\",\n      light: \"rgb(65, 149, 207)\",\n      dark: \"rgb(12, 86, 137)\",\n      contrastText: \"#fff\",\n    },\n    type: \"light\",\n    background: {\n      default: \"#fff\",\n    },\n    primary: {\n      main: \"#d63947\",\n      light: \"rgb(222, 96, 107)\",\n      dark: \"rgb(149, 39, 49)\",\n      contrastText: \"#fff\",\n    },\n  },\n};\n\nexport const lightTheme = createMuiTheme(baseThemOption);\n","import { useCallback, useLayoutEffect, useState } from \"react\";\nimport { useMedia } from \"react-use\";\n\ntype IThemeMode = \"dark\" | \"light\";\n\nexport const useThemeMode = () => {\n  const isSystemDark = useMedia(\"(prefers-color-scheme: dark)\");\n\n  const getThemeMode = useCallback(() => {\n    if (isSystemDark) {\n      return \"dark\";\n    } else {\n      return \"light\";\n    }\n  }, [isSystemDark]);\n\n  const [themeMode, setThemeMode] = useState<IThemeMode>(getThemeMode());\n\n  useLayoutEffect(() => {\n    const mode = getThemeMode();\n    setThemeMode(mode);\n  }, [getThemeMode, isSystemDark]);\n\n  return themeMode;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}